name: immortalwrt24.10 x86-64 Builder

on:
  workflow_dispatch:
  repository_dispatch:
    types: [immortalwrt-update]

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_NAME: immortalwrt
  REPO_BRANCH: openwrt-24.10
  OpenWrt_VERSION: 24.10
  OpenWrt_ARCH: x86-64
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: immortalwrt/diy-part1-x86-64.sh
  DIY_P2_SH: immortalwrt/diy-part2-x86-64-router.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 检查服务器配置
        run: |
          echo "警告⚠"
          echo "若分配的服务器性能不足，务必及时取消，重新运行！"
          echo "已知编译成功CPU型号：8370C,8171M"
          echo "已知性能不足CPU型号：8272CL,E5系列"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "--------------------------硬盘信息--------------------------"
          echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "硬盘详情："
          df -Th

      - name: 磁盘空间使用情况 (清理前)
        run: |
          echo "清理前磁盘使用情况："
          echo "============================================"
          df -hT
          echo "============================================"

      - name: 优化磁盘空间 (第一阶段)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: 最大化构建空间 (第二阶段)
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 5120
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: 磁盘空间使用情况 (清理后)
        if: (!cancelled())
        run: |
          echo "清理后磁盘使用情况："
          echo "============================================"
          df -hT
          echo "============================================"

      - name: 准备完成
        uses: actions/checkout@main

      - name: 安装前彻底清理
        run: |
          echo "安装依赖前彻底清理根分区..."
          # 清理APT缓存
          sudo apt-get clean
          sudo rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/*
          # 清理系统临时文件和日志
          sudo rm -rf /tmp/* /var/tmp/* /var/log/* 2>/dev/null || true
          # 清理更多系统文件
          sudo rm -rf /usr/share/doc/* /usr/share/man/* /usr/share/locale/* 2>/dev/null || true
          sudo rm -rf /usr/share/sounds/* /usr/share/pixmaps/* 2>/dev/null || true
          # 清理内核模块备份
          sudo rm -rf /lib/modules/*/kernel/sound/* 2>/dev/null || true
          sudo rm -rf /lib/modules/*/kernel/drivers/media/* 2>/dev/null || true
          echo "清理完成，当前磁盘使用情况："
          df -hT /

      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "${TZ}"
          echo "使用GitHub Actions工作目录 (120GB空间):"
          mkdir -p ${GITHUB_WORKSPACE}/workdir
          echo "工作目录创建完成，磁盘使用情况："
          df -hT ${GITHUB_WORKSPACE}

      - name: 下载固件源码
        working-directory: ${{ github.workspace }}/workdir
        run: |
          echo "当前工作目录磁盘使用情况："
          df -hT $PWD
          echo "开始下载源码..."
          git clone -b ${REPO_BRANCH} --single-branch --depth 1 ${REPO_URL} openwrt
          ln -sf ${GITHUB_WORKSPACE}/workdir/openwrt ${GITHUB_WORKSPACE}/openwrt
          echo "源码下载完成，磁盘使用情况："
          df -hT ${GITHUB_WORKSPACE}

      - name: 加载自定义feeds
        run: |
          [ -e ${FEEDS_CONF} ] && mv ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: 更新并安装feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          rm -rf feeds/smpackage/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd*,miniupnpd-iptables,wireless-regdb}

      - name: 加载config或生成默认配置
        run: |
          cd openwrt
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE .config || make defconfig
      
      - name: 加载自定义配置
        env:
          PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
          PPPOE_PASSWORD: ${{ secrets.PPPOE_PASSWORD }}
        run: |
          chmod +x ${DIY_P2_SH}
          cd openwrt
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: 清理不必要文件
        run: |
          echo "清理前磁盘使用情况："
          df -hT ${GITHUB_WORKSPACE}
          # 清理系统缓存和临时文件
          sudo rm -rf /tmp/* /var/tmp/* /var/cache/* /var/log/* 2>/dev/null || true
          sudo apt-get clean
          sudo rm -rf /usr/share/doc/* /usr/share/man/* /usr/share/locale/* 2>/dev/null || true
          echo "清理后磁盘使用情况："
          df -hT ${GITHUB_WORKSPACE}

      - name: 下载软件包
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j4
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          echo "下载完成，磁盘使用情况："
          df -hT ${GITHUB_WORKSPACE}

      - name: 编译前最后清理
        run: |
          echo "编译前清理临时文件..."
          sudo rm -rf /tmp/* /var/tmp/* 2>/dev/null || true
          sudo journalctl --vacuum-time=1d 2>/dev/null || true
          echo "编译前磁盘使用情况："
          df -hT ${GITHUB_WORKSPACE}
          df -hT /
          
      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(($(nproc) + 1)) thread compile"
          make -j$(($(nproc) + 1)) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "COMPILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 检查磁盘使用情况
        if: (!cancelled())
        run: df -hT

      - name: 列出固件文件
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          echo -e "------------------------------- 文件列表 -------------------------------"
          ls
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: 整理固件
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cp -rf openwrt/.config ${{ env.FIRMWARE }}/config
          cd ${{ env.FIRMWARE }}
          rm -rf packages
          rm -rf profiles.json
          rm -rf *.buildinfo
          rm -rf *.manifest
          rm -rf *kernel.bin
          rm -rf *squashfs-rootfs.img.gz
          mv immortalwrt-${{ env.OpenWrt_ARCH }}-generic-rootfs.tar.gz immortalwrt-${{ env.OpenWrt_VERSION }}-${{ env.OpenWrt_ARCH }}-generic-rootfs-${{ env.COMPILE_DATE }}.tar.gz
          mv immortalwrt-${{ env.OpenWrt_ARCH }}-generic-squashfs-combined-efi.img.gz immortalwrt-${{ env.OpenWrt_VERSION }}-${{ env.OpenWrt_ARCH }}-generic-squashfs-combined-efi-${{ env.COMPILE_DATE }}.img.gz
          echo -e "------------------------------- 文件列表 -------------------------------"
          ls

      - name: 生成发布标签
        id: tag
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          echo "release_tag=${{ env.REPO_NAME }}_${{ env.OpenWrt_VERSION }}_${{ env.OpenWrt_ARCH }}_${{ env.COMPILE_DATE }}" >> ${GITHUB_OUTPUT}
          touch ${{ env.REPO_NAME }}-${{ env.OpenWrt_ARCH }}-release.txt
          echo "
          💻 架构: ${{ env.OpenWrt_ARCH }}

          📂 源码: ${{ env.REPO_URL }}

          🌳 分支: ${{ env.REPO_BRANCH }}

          ⏱️ 编译时间: ${{ env.COMPILE_DATE }}

          🌐 管理地址: 192.168.5.1 , 子网掩码: 255.255.255.0

          👤 用户名: root

          🔒 密码: password

          📡 网络配置:
          - 默认为 DHCP 模式
          - 支持 PPPoE 拨号配置
          - 配置文件: /etc/uci-defaults/99-network-setup

          🔐 PPPoE 自动配置（推荐）:
          1. 仓库 Settings → Secrets and variables → Actions
          2. 添加 Secret: PPPOE_USERNAME (你的PPPoE用户名)
          3. 添加 Secret: PPPOE_PASSWORD (你的PPPoE密码)
          4. 重新运行 Actions 编译，固件将自动配置PPPoE

          🔧 手动配置方法:
          1. SSH 连接: ssh root@192.168.5.1
          2. 通过 LuCI 界面: 网络 → 接口 → WAN → 修改
          3. 协议改为 PPPoE，填入用户名密码
          4. 保存并应用配置

          " > ${{ env.REPO_NAME }}-${{ env.OpenWrt_ARCH }}-release.txt
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 发布固件到 Releases
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: ${{ env.REPO_NAME }}-${{ env.OpenWrt_ARCH }}-release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: 删除 Releases 旧版本
        uses: dev-drprasad/delete-older-releases@master
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          keep_latest: 2
          delete_tags: true
          delete_tag_pattern: ^${{ env.REPO_NAME }}_${{ env.OpenWrt_VERSION }}_${{ env.OpenWrt_ARCH }}_.*$
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}